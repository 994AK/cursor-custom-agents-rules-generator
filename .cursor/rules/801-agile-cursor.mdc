---
description: @801 Rule 801 Agile Workflow Operating Proceedures for the AI Agent to follow to complete a project or goal from idea through inception and to final project completion.
globs: "**/*.{md,story.md,prd.md,adr.md}"
---
# Agile Cursor Workflow

<version>2.0.0</version>

## Critical Requirements

<critical>
- All documentation must be in .ai/ directory following templates:
  - [901-prd.mdc](mdc:.cursor/rules/901-prd.mdc)
  - [902-arch.mdc](mdc:.cursor/rules/902-arch.mdc)
  - [903-story.mdc](mdc:.cursor/rules/903-story.mdc)
- PRD must define at least one Epic
- Stories must be organized under Epics in .ai/epic-{n}/ directories
- Only 1 Epic can be in_progress at any time
- Only 1 story can be in_progress at any time
- Stories must be implemented in PRD-specified order within their Epic
- Story status progression: draft -> in_progress -> complete
- Never implement without story approval
</critical>

## Phase Constraints

<critical>
PLAN phase - only modify:
- .ai/ directory files and structure
- documentation files
- readme files
- workflow rules

ACT phase - implement approved story tasks within current Epic
</critical>

## Implementation Constraints

- Begin sessions by reviewing .ai/prd.md and .ai/arch.md
- Stories created as .ai/story-{number}.story.md
- Update ADR change log for major changes
- Maintain test coverage and documentation
- Record all implementation notes and commands

## Startup Checks

1. Verify .ai directory exists
2. Locate active .ai/prd.md and .ai/arch.md
3. Identify story status
4. Report current workflow state

## Workflow Sequence

```mermaid
sequenceDiagram
    participant U as USER
    participant A as AGENT

    Note over U,A: PLAN PHASE (Only modify .ai/, docs, readme, rules)
    
    alt No PRD Exists
        A->>U: Request project requirements
        U->>A: Provide initial requirements
        A->>U: Ask clarifying questions
        U->>A: Provide clarifications
        A->>U: Create and Present draft .ai/prd.md with Epics
    end

    alt No ARCH Exists
        A->>U: Suggest architecture as inferred from PRD
        A->>U: Request architecture preferences that are still needed
        U->>A: Provide architecture context
        A->>U: Present draft .ai/arch.md
    end

    loop Until Both Approved
        A->>U: Present PRD for review
        U->>A: Request PRD changes
        A->>U: Update PRD
        A->>U: Present ARCH for review
        U->>A: Request ARCH changes
        A->>U: Update ARCH
        U->>A: Confirm PRD/ARCH approval
    end

    Note over U,A: ACT PHASE (Implement approved story tasks)

    loop For Each Epic in PRD
        Note over U,A: Only one Epic active at a time
        
        loop For Each Story in Current Epic
            A->>U: Create and Present draft story
            U->>A: Review and provide feedback
            A->>U: Update story based on feedback
            U->>A: Approve story for implementation

            loop For Each Task in Story
                A->>U: Implement and test task
                alt Tests or Implementation Issues
                    A->>U: Report issues and request guidance
                    U->>A: Provide direction
                else Success
                    A->>U: Present completed task
                end
            end

            A->>U: Present completed story
            U->>A: Verify and approve completion
        end
        
        A->>U: Present completed Epic
        U->>A: Verify and approve Epic completion
    end
```

Note: This diagram illustrates the direct interaction between the USER (Admiral) and the AGENT (AI Composer), showing the complete workflow from planning through implementation while enforcing the single-epic-story constraint.
